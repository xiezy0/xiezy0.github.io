<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[BCOS实战训练-手工搭链]]></title>
    <url>%2F2019%2F08%2F02%2FBCOS%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83-%E6%89%8B%E5%B7%A5%E6%90%AD%E9%93%BE%2F</url>
    <content type="text"><![CDATA[FISCO BCOS 手动搭链安装java1.8下载java1.8安装包由于现在java官网无法直接下载jdk1.8的安装包，此次安装使用Xshell6（而且如果光是命令行来说Centos7真是太难用了） 方法一： 安装Xftp6配套工具，建议去官方网站下载免费个人版，个人用足够了。从有道云盘上下载好jdk1.8的安装包后，打开Xshell上的文件传输窗口，点击如下的绿色按钮 会弹出文件传输窗口 左边的窗口是需要上传的文件所在的目录，右边窗口是此时命令行所在的目录，即文件上传后的位置。 方法二： 可以使用linux的lrzsz工具，发现十分好用，推荐使用这个工具， Centos下使用yum包管理工具安装lrzsz，Ubuntu使用apt-get#yum install -y lrzsz 从windows上传文件到当前目录，十分贴心的自动打开一个窗口，然后自己找到想上传的文件rz sz将linux下的文件传到win系统下，我尝试的时候发现上传的目录也可以自己选择sz (一个或多个文件名，中间用空格隔开) 安装java1.8在Centos上安装java1.8首先要将系统自带的openjdk卸载，否则可能出现路径混乱的情况，一般Ubuntu会自带openjdk，Centos不一定，像我安装的就没有。 首先查找系统中的openjdk包并卸载 此条命令查找系统中所有的openjdk包，如果版本过高或者过低也可以使用下面的命令查找对应的java包，然后使用再下一条命令卸载即可rpm -qa | grep openjdk(要查找的包名) 卸载所有的关于openjdk的包 12rpm -e --nodeps (要卸载的包名) yum remove -y (要卸载的包名) 将java1.8安装到对应的目录下 此处对应的安装包为.tar.gz格式的文件创建并进入/usr/java目录 12mkdir /usr/java cd /usr/java 将java1.8的安装包移动到安装目录下mv jdk-8u181-linux-x64.tar.gz(此处根据自己的安装包文件名填写) /usr/java/解压文件到当前目录tar -zxf jdk-8u181-linux-x64.tar.gz添加java路径到环境变量，即/etc/profilevi /etc/profile 到文件最末尾，按i键进入插入编辑模式，添加如下路径(即java的安装路径和某些包路径) 12345JAVA_HOME=/usr/java/jdk1.8.0_181JRE_HOME=$JAVA_HOME/jrePATH=$PATH:JAVA_HOME/bin:$JRE_HOME/binCLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:JRE_HOME/lib/dt.jarexport JAVA_HOME JRE_HOME PATH CLASSPATH 更新输入source /etc/profile 安装完成后查看版本信息，出现对应java1.8信息即成功java -version 此处对应的安装包为.rpm格式的文件创建并进入/usr/java目录mkdir /usr/java &amp;&amp; cd /usr/java将java1.8的安装包移动到安装目录下mv jdk-8u202-linux-x64.rpm(此处根据自己的安装包文件名填写) /usr/java/添加可执行权限chmod +x jdk-8u202-linux-x64.rpm执行rpm命令安装javarpm -ivh jdk-8u202-linux-x64.rpm安装完成后查看版本信息java -version 获取代码在/home目录下新建一个文件夹，用来存放fisco相关代码 12mkdir /home/myfiscocd /home/myfisco 从github上clone分支master1.3源码，建议直接使用提前下载好的压缩包git clone -b master-1.3 https://github.com/FISCO-BCOS/FISCO-BCOS.git 由于某些原因，现在从github上拉代码非常慢，尤其是网不好的情况下，更不容易拉成功，如果一直不成功，使用有道云盘上我提前下好的1.3版本压缩包，解压到/home/myfisco即可。 有1.3版本代码后直接执行目录下的build脚本拉某些包会出现一些问题，需要提前修改一下build脚本。之前脚本里的命令有一条要先下载淘宝的npm镜像管理工具cnpm，但是不知道为什么怎么样都拉不下来，于是修改为直接使用npm安装依赖。使用build脚本的话虽然很简单，但是会隐藏很多细节，而且网络不好脚本无法完整执行，因此这里将脚本完全解析，然后自己一条条执行，便于理解和排错。 首先将1.3的代码上传到虚拟机中，还是之前的myfisco目录rz安装unzip工具，用于解压云盘分享的压缩包 123yum install -y unzipunzip FISCO-BCOS-master-1.3.zipcd FISCO-BCOS-mater-1.3 安装node.js安装8.x的nodejs,如果虚拟机中有nodejs且版本比8高直接下一步，比8低的话，如下先remove命令卸载再安装 123curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -yum remove -y nodejsyum install -y nodejs 检查版本node -v 安装合约编译工具fisco-solc安装1.3对应的合约编译工具solc,好像也不太好下载，这里也准备了压缩包，将压缩包解压后放到/usr/bin目录下 12curl -Lo /usr/bin/fisco-solc https://github.com/FISCO-BCOS/solidity/releases/download/release-1.3/fisco-solc-centoschmod +x /usr/bin/fisco-solc 若下载不下来则使用rz命令将压缩文件上传到虚拟机，解压后mv到/usr/bin目录下，再给执行权限即可 123rztar -zxf fisco-solc.tar.gz -C /usr/binchmod a+x usr/bin/fisco-solc 安装依赖使用yum和nodejs的包管理器npm安装依赖包,如果命令出错可能是安装的工具太多，可以减少安装的数量或者一次安装一个 12345yum install -y -q epel-releaseyum install -y -q make gcc-c++ leveldb-devel curl-devel gmp-devel openssl openssl-devel jqnpm install -g babel-cli babel-preset-es2017echo &apos;&#123; &quot;presets&quot;: [&quot;es2017&quot;] &#125;&apos; &gt; ~/.babelrcnpm install -g ethereum-console 下载源码下载bcos1.3版本的二进制文件，然后解压到/usr/local/bin/目录下,这里如果下载不下来就在云盘上下载然后上传到虚拟机中 123curl -LO https://github.com/FISCO-BCOS/FISCO-BCOS/releases/download/v1.3.8/fisco-bcos.tar.gztar -zxf fisco-bcos.tar.gzchmod a+x fisco-bcos &amp;&amp; mv fisco-bcos /usr/local/bin/ 编译源码(可以不编译，但是要拉去依赖包) 退回到FISCO-BCOS-mater-1.3目录下，使用cmake3和make工具编译源码。拉取过程中发现有一个依赖包很大而且拉不下来，于是本地下载下来并上传到相应目录下 12345rz #在本地找到boost1_63_0.tar.gz并上传mv boost1_63_0.tar.gz deps/src/mkdir -p build &amp;&amp; cd buildcmake3 ..make &amp;&amp; make all 在相关目录下拉取依赖包，分别在FISCO-BCOS-mater-1.3的3个目录web3lib tool systemcontract，以及其tools目录下的3个目录contract systemcontract web3lib下执行npm install 至此，已经下载并编译了bcos1.3版本的代码，运行如下命令检查bcos版本,得到具体信息则说明编译成功fisco-bcos --version 基础配置安装脚本依赖1yum install -y vim-common 根证书cd /home/myfisco/FISCO-BCOS-master-1.3/tools/scripts/先给脚本执行权限chmod a+x *.sh将链证书生成到/home/myfisco目录下./generate_chain_cert.sh -o /home/myfisco 机构证书还是在scripts目录下，生成机构证书需要根证书-c后面是根证书路径 -o后面是机构证书生成目录 -n后面是机构名字./generate_agency_cert.sh -c /home/myfisco/ -o /home/myfisco/ -n test_agency SDK证书sdk证书生成时需要机构证书，此处将证书生成在机构证书目录下，sdk证书用于web3sdk与节点连接，脚本运行过程中会让输入密码，默认的123456密码，也可以自己设置，但是这个密码需要记住，之后配置证书时会用到./generate_sdk_cert.sh -d /home/myfisco/test_agency/ 创世节点生成创世节点这个脚本里面做了很多事情，可以在这个链接里的2,3章了解一下没有脚本手动操作的步骤，挺麻烦的。 1.3纯手工搭链 启动脚本前先关闭centos的防火墙 123systemctl stop firewalld.servicesystemctl disable firewalld.servicecd /home/myfisco/FISCO-BCOS-master-1.3/tools/scripts/ ./generate_genesis_node -o 节点文件夹生成位置 -n 节点名 -l 节点监听的IP -r 节点的RPC端口 -p 节点的P2P端口 -c 节点的Channel Port端口 -d 机构证书存放目录 -a 机构证书名 1./generate_genesis_node.sh -o /home/myfisco -n node0 -l 127.0.0.1 -r 8545 -p 30303 -c 8891 -d /home/myfisco/test_agency/ -a test_agency 创建创世节点，部署完系统合约后出现具体信息 记住创世节点的RPC端口号127.0.0.1:8545，后面需要用到 启动节点12cd /home/myfisco/node0./start.sh 加入联盟建议在X_shell多开一个terminal界面，复制ssh渠道即可 cd /home/myfisco/FISCO-BCOS-master-1.3/tools/scripts设置操作的RPC端口./set_proxy_address.sh -o 127.0.0.1:8545注册节点,成功会返回发送交易成功./register_node.sh -d /home/myfisco/node0 查看进程及日志信息 12ps -ef |grep fisco-bcostail -f /home/myfisco/node0/log/* |grep +++++ 增加节点准备查看创世节点信息(在tools/scripts目录下)，与系统合约部署成功后的信息一致./node_info.sh -d /home/myfisco/node0/ -o node0.info 生成节点端口不能重复，使用的脚本也与创世节点不一致-e时需配置现有的所有节点P2P端口bash generate_node -o 节点文件生成位置 -n 节点名 -l 节点监听的IP -r 节点的RPC端口 -p 节点的P2P端口 -c 节点的Channel Port端口 -e 链上现有节点的所有节点P2P端口列表，用“,”隔开（如指向创世节点和自己 127.0.0.1:30303,127.0.0.1:30304） -d 机构证书存放目录 -a 机构证书名 -f 创世节点的信息文件 1./generate_node.sh -o /home/myfisco -n node1 -l 127.0.0.1 -r 8546 -p 30304 -c 8892 -e 127.0.0.1:30303,127.0.0.1:30304 -d /home/myfisco/test_agency -a test_agency -f node0.info 成功则返回如下信息 启动节点12cd /home/myfisco/node1./start.sh 节点加入联盟在tools/scripts目录下./register_node.sh -d /home/myfisco/node1/查看节点进程和日志信息，多出一个节点进程，日志在不断刷新即说明节点加入成功 12ps -ef |grep fisco-bcostail -f /home/myfisco/node0/log/* |grep +++++ 练习：自己再加入2个节点，使网络中节点数变成4个。余有时间建议把创建创世节点的脚本看一遍，结合我给的github上的操作手册的2,3章，这样会对bcos理解更深]]></content>
  </entry>
  <entry>
    <title><![CDATA[Centos系统安装注意事项]]></title>
    <url>%2F2019%2F07%2F31%2FCentos%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[Centos7安装踩坑本来想安装一个中文版的带Ghome桌面的centos7虚拟机，结果装完发现好像有个步骤忘了点了，然后装完打开发现只有最简单的界面，而且和ubuntu的terminal比起来真的使用体验非常差，于是想继续安装一个桌面，便于以后使用。 无法解析yum源虚拟机无法上网首先发现无论怎样yum都没法安装工具，找了一下才发现是网卡设置压根就有个设置有问题。 12ping 114.114.114.114 #随便一个IP就行ip ad # 查看虚拟机ip，没有即网卡设置有问题 解决： 找到网卡配置文件，在/etc/sysconfig/network-scripts/目录下的ifcfg-ens33文件，用vi软件编辑，按i进入插入模式后将ONBOOT的NO改成YES，再重启网络服务，最后使用PING命令检查是否成功。 123456cd /etc/sysconfig/network-scripts/vi ifcfg-ens33 #不知道哪个是网卡配置文件可以使用ip ad命令，一般第二部分开头的信息会包含ONBOOT=no #一般在最后一行，将no改为yesservice network restart #重启网络服务，最后使用ping命令测试 DNS配置问题检测DNS配置是否正常可以使用nslookup命令，首先检查是否有nslookup这个工具，没有的话先安装（此条错误在确定可以ping通外网的情况后，还是无法访问yum源）。 1nslookup www.aliyun.com 若解析成功，会返回扫描后的一些信息。 解决： 出现这个问题是因为yum在安装包的过程中，虽然已经联网，但是没法解析远程包管理库对应的域名，所以我们只需要在网络配置中添加上DNS对应的ip地址即可。打开配置文件，输入命令： 1vi /etc/sysconfig/network-scripts/ifcfg-ens33 #ens33是网卡名字 在文件末尾追加DNS： 12DNS1=8.8.8.8DNS2=4.2.2.2 重启网卡： 1ifup ens33 #网卡名字 其他情况发现光是修改REBOOT=yes也没用，多次进行挂载、修改网卡配置文件、重置IP地址、重启网络、创建又删除配置文件的，都还是解决不了上面的问题，最后在yum软件仓库的配置文件中发现了问题： 位置锁定在：/etc/yum.repos.d/ 问题文件为：CentOS-Base.repo /* 这个文件的作用：是配置yum源的repo库，repo库为空，会影响yum的软件安装 */机子能上网，DNS也配置也已经配置了，但还是无法解析yum源，那可以换一个yum源再试试 另外，由于centos自带的yum源可能在下载安装软件工具时会比较慢，建议换成国内的yum源。 换源之前先确定系统中是否安装了curl或者wget工具，没有的话先安装（因为换源时需要向国内源网站请求）： 12yum install -y wgetyum install -y curl 配置阿里云yum源在BCOS的安装中会有一系列的yum安装操作，使用CentOS自带的国外源安装，不知道要下到哪年去了，所以我们为机器配置国内的yum源①备份原有的yum源并使用wget下载阿里云的yum源 123# cd /etc/yum.repo.d/# mv CentOS-Base.repo CentOS-Base.repo.bak# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 生成缓存 1234# yum clean all# yum makecache# yum -y update# yum upgrade 配置阿里云epel源epel源是无论如何一定要配置的，不然后面安装BCOS中会出现很多问题（比如node.js安不上），配置方法如下： 1234# cd /etc/yum.repo.d/# mv epel.repo epel.repo.bak# mv epel-testing.repo epel-testing.repo.bak# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo]]></content>
  </entry>
  <entry>
    <title><![CDATA[bcos深入学习和合约开发]]></title>
    <url>%2F2019%2F07%2F31%2FBCOS%E5%AE%9E%E6%88%98%E8%AE%AD%E7%BB%83-bcos%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0%E5%92%8C%E5%90%88%E7%BA%A6%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[bcos深入学习和合约开发区块链节点关于区块链节点目录下各文件信息介绍，参考链接 使用指南 区块链节点一章 证书说明关于bcos各证书的生成过程和声明，有兴趣的可以参考链接 使用指南 证书说明一章 系统合约和控制台关于bcos系统合约的介绍以及nodejs写好的控制系统参数脚本可以参考链接 使用指南 系统合约一章 关于bcos的控制台以及使用方法可以关注链接 使用指南 控制台一章 合约入门准备会得到对应设置的代理端口8545，这里也可以设置其他节点的端口，只是记得出问题了也是在对应节点排查。 1./set_proxy_address.sh -o 127.0.0.1:8545 设置完后所有的操作生成的交易都会发到此端口上，如果node0出问题了，可以用这个脚本设置其他正常节点，保证链能够正常工作，再去排错解决。 编写合约这里以最简单的hello world合约为例，合约使用solidity语言编写，语言风格类似脚本语言 新建一个文件，以sol为后缀名 12touch HelloWord.solvi HelloWord.sol 将下面内容复制进去 12345678910111213pragma solidity ^0.4.2;contract HelloWorld&#123; string name; function HelloWorld()&#123; name=&quot;Hi,Welcome!&quot;; &#125; function get()constant returns(string)&#123; return name; &#125; function set(string n)&#123; name=n; &#125;&#125; 编译部署合约其实在/FISCO-BCOS-master-1.3/tools/contract目录下已经有了这个合约，所以我们直接使用nodejs写成的deploy.js自动编译和部署合约，但是后面的java项目开发比这要稍微复杂一些。 先依次启动4个节点 然后进入tools目录下的contract目录编译部署合约 12cd /home/myfisco/FISCO-BCOS-master-1.3/tools/contractbabel-node deploy.js HelloWorld 输出可见合约地址，部署成功 调用合约（使用nodejs） 这里已经使用nodejs写好了合约调用程序，内容如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * @file: demoHelloWorld.js * @author: fisco-dev * * @date: 2017 */var Web3= require(&apos;web3&apos;);var config=require(&apos;../web3lib/config&apos;);var fs=require(&apos;fs&apos;);var execSync =require(&apos;child_process&apos;).execSync;var web3sync = require(&apos;../web3lib/web3sync&apos;);var BigNumber = require(&apos;bignumber.js&apos;);if (typeof web3 !== &apos;undefined&apos;) &#123; web3 = new Web3(web3.currentProvider);&#125; else &#123; web3 = new Web3(new Web3.providers.HttpProvider(config.HttpProvider));&#125;console.log(config);var filename=&quot;HelloWorld&quot;;var address=fs.readFileSync(config.Ouputpath+filename+&apos;.address&apos;,&apos;utf-8&apos;);var abi=JSON.parse(fs.readFileSync(config.Ouputpath/*+filename+&quot;.sol:&quot;*/+filename+&apos;.abi&apos;, &apos;utf-8&apos;));var contract = web3.eth.contract(abi);var instance = contract.at(address);console.log(filename+&quot;contract address:&quot;+address);(async function()&#123; var name=instance.get(); console.log(&quot;HelloWorld contract get function call first :&quot;+name.toString()); var func = &quot;set(string)&quot;; var params = [&quot;HelloWorld!&quot;]; var receipt = await web3sync.sendRawTransaction(config.account, config.privKey, address, func, params); console.log(&quot;HelloWorld contract set function call , &quot;+&apos;(transaction hash ：&apos;+receipt.transactionHash+&apos;)&apos;); name=instance.get(); console.log(&quot;HelloWorld contract get function call again :&quot;+name.toString());&#125;)() 执行合约调用程序，还是tools/scripts目录下还是contract目录？babel-node demoHelloWorld.js调用成功会返回交易信息]]></content>
  </entry>
  <entry>
    <title><![CDATA[Dapp开发]]></title>
    <url>%2F2019%2F07%2F31%2FDapp%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[Dapp开发开发工具安装IDEA或eclipseIDEA官网下载Ultimate版本，可以免费试用30天。 安装时采用默认设置，需要的组件已经内置于IDE中。 根据自己的系统下载安装对应系统的IDEA或eclipse。 Gradle官网下载最新版本的gradle： https://gradle.org/releases/ 或者直接wget稳定版，解压到/opt目录下： 12wget https://downloads.gradle.org/distributions/gradle-5.0-bin.zipunzip -d /opt/gradle gradle-5.0-bin.zip 添加环境变量： 1vim /etc/profile 在末尾添加两行： 12export GRADLE_HOME=/opt/gradle/gradle-5.0export PATH=$&#123;GRADLE_HOME&#125;/bin:$PATH 更新配置文件： 1source /etc/profile 检查是否安装成功： 1gradle --version 1.搭建一个FISCO-BCOS的链用脚本搭建一条BCOS2.0的链： 安装依赖，ubuntu使用apt： 1sudo yum install -y openssl curl 创建操作目录并下载脚本： 123cd ~ &amp;&amp; mkdir -p fisco &amp;&amp; cd fiscocurl -LO https://github.com/FISCO-BCOS/FISCO-BCOS/releases/download/`curl -s https://api.github.com/repos/FISCO-BCOS/FISCO-BCOS/releases | grep &quot;\&quot;v2\.[0-9]\.[0-9]\&quot;&quot; | sort -u | tail -n 1 | cut -d \&quot; -f 4`/build_chain.sh &amp;&amp; chmod u+x build_chain.sh 搭建单群组4节点联盟链，在fisco目录下执行以下命令，如果30300~30303，20200~20203，8545~8548端口被占用，改为其他端口： 1bash build_chain.sh -l &quot;127.0.0.1:4&quot; -p 30300,20200,8545 命令执行成功会输出All completed。如果执行出错，请检查nodes/build.log文件中的错误信息。 启动所有节点： 1bash nodes/127.0.0.1/start_all.sh 检查进程是否启动： 1ps -ef|grep fisco 检查节点链接和日志输出： 123tail -f nodes/127.0.0.1/node0/log/log* | grep +++tail -f nodes/127.0.0.1/node0/log/log* | grep connected 2.安装一个交互式控制台环境要求： jdk1.8+ 获取控制台并回到fisco目录： 1cd ~/fisco &amp;&amp; bash &lt;(curl -s https://raw.githubusercontent.com/FISCO-BCOS/console/master/tools/download_console.sh) 拷贝控制台配置文件 若节点未采用默认端口，请将applicationContext.xml文件中的20200替换成节点对应的channle端口。 1cp -n console/conf/applicationContext-sample.xml console/conf/applicationContext.xml 配置控制台证书： 1cp nodes/127.0.0.1/sdk/* console/conf/ 启动控制台： 1cd ~/fisco/console &amp;&amp; bash start.sh 使用控制台获取信息： 12345# 获取客户端版本[group:1]&gt; getNodeVersion# 获取节点链接信息[group:1]&gt; getPeers 3.编写一个Solidity合约在区块链上进行应用开发时，结合业务需求，首先需要设计对应的智能合约，确定合约需要储存的数据，在此基础上确定智能合约对外提供的接口，最后给出各个接口的具体实现。 以资产转移应用为例，介绍合约的三步设计：存储设计-&gt;接口设计-&gt;逻辑实现。 存储设计：基于分布式存储，设计存储表结构 account asset_value alice 10000 bob 20000 接口设计：基于业务需求，设计合约接口 // 查询资产金额 function select(string account) public constant returns(int256, uint256) // 资产注册 function register(string account, uint256 amount) public returns(int256) // 资产转移 function transfer(string from_asset_account, string to_asset_account, uint256 amount) public returns(int256) 逻辑实现：基于CRUD接口，实现业务逻辑 Asset.sol合约完整源码在附件中给出。 提醒：Asset.sol合约的实现需要引入FISCO BCOS提供的一个系统合约接口文件 Table.sol ，自己调试的话需要带着 Table.sol 合约一起， Table.sol 合约也在附件中给出。 合约调试利用Remix在线部署和调试合约： http://remix.ethereum.org/#optimize=false&amp;evmVersion=null&amp;version=soljson-v0.4.24+commit.e67f0147.js&amp;appVersion=0.7.7 4.合约编译和sdk配置Solidity合约需要通过编译器转换成机器可执行的二进制，这些二进制是一系列OpCode的组合，虚拟机将解析执行这些OpCode实现合约业务逻辑。 编译之后的合约需要通过工具部署到区块链（写入区块链账本），之后才可以根据合约接口描述文件（ABI）进行调用访问。 BCOS2.0提供了控制台一件编译及部署合约的方法： 将Assert.sol放置在console/solidity/contract目录，在控制台执行deploy Assert.sol即可完成合约的编译以及部署，成功会返回合约地址。 将合约编译为Java文件以便于外部调用如果你采用Java开发Dapp，而Java程序无法直接调用Solidity合约，需要先将Solidity合约文件编译为Java文件。 控制台提供了编译工具，可以将Asset.sol合约文件存放在console/contracts/solidity目录。利用console目录下提供的sol2java.sh脚本进行编译，操作如下： 1234# 切换到fisco/console/目录$ cd ~/fisco/console/# 编译合约，后面指定一个Java的包名参数，可以根据实际项目路径指定包名$ ./sol2java.sh org.fisco.bcos.asset.contract 运行成功之后，将会在console/contracts/sdk目录生成java、abi和bin目录。 SDK配置获取Java工程项目： 12345# 获取Java工程项目压缩包$ cd ~$ curl -LO https://github.com/FISCO-BCOS/LargeFiles/raw/master/tools/asset-app.tar.gz# 解压得到Java工程项目asset-app目录$ tar -zxf asset-app.tar.gz FISCO BCOS节点证书配置: FISCO BCOS作为联盟链，其SDK连接区块链节点需要通过证书(ca.crt、node.crt)和私钥(node.key)进行双向认证。因此需要将节点所在目录nodes/${ip}/sdk下的ca.crt、node.crt和node.key文件拷贝到项目的资源目录，供SDK与节点建立连接时使用： 1234# 进入~目录# 拷贝节点证书到项目的资源目录$ cd ~$ cp fisco/nodes/127.0.0.1/sdk/* asset-app/src/test/resources/ 注意： 如果搭链时设置的rpc_listen_ip为127.0.0.1或者0.0.0.0，channel_port为20200， 则applicationContext.xml配置不用修改。若区块链节点配置有改动，则将applicationContext.xml文件中的标签内的端口改为配置的端口。 5.业务开发配置好了web3sdk以后，下一步要做的就是用Java来调用合约了，asset-app项目中的核心类AssetClient.java: 通过调用Asset.java实现对合约的部署与调用，包括以下核心功能： 初始化 初始化代码的主要功能为构造Web3j与Credentials对象，这两个对象在创建对应的合约类对象(调用合约类的deploy或者load函数)时需要使用。 1234567891011// 函数initialize中进行初始化ApplicationContext context = new ClassPathXmlApplicationContext(&quot;classpath:applicationContext.xml&quot;);Service service = context.getBean(Service.class);service.run();ChannelEthereumService channelEthereumService = new ChannelEthereumService();channelEthereumService.setChannelService(service);// 初始化Web3j对象Web3j web3j = Web3j.build(channelEthereumService, 1);// 初始化Credentials对象Credentials credentials = Credentials.create(Keys.createEcKeyPair()); 构造合约类对象 可以使用deploy或者load函数初始化合约对象，两者使用场景不同，前者适用于初次部署合约，后者在合约已经部署并且已知合约地址时使用。 1234// 部署合约Asset asset = Asset.deploy(web3j, credentials, new StaticGasProvider(gasPrice, gasLimit)).send();// 加载合约地址Asset asset = Asset.load(contractAddress, web3j, credentials, new StaticGasProvider(gasPrice, gasLimit)); 接口调用 使用合约对象调用对应的接口，处理返回结果。 123456// select接口调用Tuple2&lt;BigInteger, BigInteger&gt; result = asset.select(assetAccount).send();// register接口调用TransactionReceipt receipt = asset.register(assetAccount, amount).send();// transfer接口TransactionReceipt receipt = asset.transfer(fromAssetAccount, toAssetAccount, amount).send(); 运行项目的编写已经完成，接下来运行项目，测试功能是否正常。 编译 1234# 切换到项目目录$ cd ~/asset-app# 编译项目$ ./gradlew build 或 gradle build 编译成功之后，将在项目根目录下生成dist目录。dist目录下有一个asset_run.sh脚本，简化项目运行。现在开始一一验证本文开始定下的需求。 部署Asset.sol合约 123# 进入dist目录$ cd dist$ bash asset_run.sh deploy 注册资产 123$ bash asset_run.sh register Alice 100000$ bash asset_run.sh register Bob 100000 查询资产 123$ bash asset_run.sh query Alice $ bash asset_run.sh query Bob 资产转移 12345$ bash asset_run.sh transfer Alice Bob 50000$ bash asset_run.sh query Alice $ bash asset_run.sh query Bob 注意：如果使用IDE运行项目，注意导入Gradle项目的时候使用的是本地gradle，否则可能出现版本错误。 运行时参数为命令行参数。 IDEA也可以用mavan导入相关依赖。 到这里你已经完成了一个Dapp的开发，你可以探索更复杂的应用开发。 6.spring boot版本的示例项目获取源码1$ git clone https://github.com/FISCO-BCOS/spring-boot-starter.git 节点证书配置将节点所在目录nodes/${ip}/sdk下的ca.crt、node.crt和node.key文件拷贝到项目的src/main/resources目`录下供SDK使用。 配置文件设置spring boot项目的配置文件application.yml如下图所示，其中加了注释的内容根据区块链节点配置做相应修改。 12345678910111213141516171819202122encrypt-type: # 0：普通， 1：国密 encrypt-type: 0 group-channel-connections-config: all-channel-connections: - group-id: 1 # 群组ID connections-str: - 127.0.0.1:20200 # 节点，listen_ip:channel_listen_port - 127.0.0.1:20201 - group-id: 2 connections-str: - 127.0.0.1:20202 # 节点，listen_ip:channel_listen_port - 127.0.0.1:20203 channel-service: group-id: 1 # sdk实际连接的群组 agency-name: fisco # 机构名称accounts: pem-file: 0xcdcce60801c0a2e6bb534322c32ae528b9dec8d2.pem # PEM 格式账户文件 p12-file: 0x98333491efac02f8ce109b0c499074d47e7779a6.p12 # PKCS12 格式账户文件 password: 123456 # PKCS12 格式账户密码 运行编译并运行测试案例，在项目根目录下运行： 12$ ./gradlew build$ ./gradlew test 当所有测试案例运行成功，则代表区块链运行正常，该项目通过SDK连接区块链正常。开发者可以基于该项目进行具体应用开发。 注：如果在IntelliJ IDEA或Eclipse中运行该demo工程，则使用gradle wrapper模式并安装Lombok插件，此外IntelliJ IDEA需要在设置中开启Annotation Processors功能。]]></content>
  </entry>
</search>
